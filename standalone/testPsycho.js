// Generated by CoffeeScript 1.10.0
var ButtonPannel, FacePannel, InfoPannel, LetterPannel, TestMainPannel, Timer,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Timer = (function() {

  /* a simple timer to keep track of time */
  function Timer() {
    this.getTime = bind(this.getTime, this);
    this.startTimer = bind(this.startTimer, this);
    this.chronoStart = 0;
    return;
  }

  Timer.prototype.startTimer = function() {
    this.chronoStart = (new Date()).getTime();
  };

  Timer.prototype.getTime = function() {
    return (new Date()).getTime() - this.chronoStart;
  };

  return Timer;

})();

FacePannel = (function(superClass) {
  extend(FacePannel, superClass);


  /* the pannel that contain the face (left/Right looking) */

  function FacePannel(pannelID) {
    FacePannel.__super__.constructor.call(this, pannelID);
    return;
  }

  FacePannel.prototype.lookTo = function(direction) {

    /* change the direction in which the image looks */
    if (!(direction === "left" || direction === "right")) {
      console.log("Error, direction " + direction + " not available");
      return;
    }
    this.pannel.src = "img/gazecuing_" + direction + ".png";
  };

  return FacePannel;

})(Pannel);

InfoPannel = (function(superClass) {
  extend(InfoPannel, superClass);


  /* an info pannel has easy test/color access */

  function InfoPannel(pannelID, defaultDisplayValue) {
    if (defaultDisplayValue == null) {
      defaultDisplayValue = "block";
    }
    InfoPannel.__super__.constructor.call(this, pannelID, defaultDisplayValue);
    return;
  }

  InfoPannel.prototype.setText = function(text) {
    this.pannel.innerHTML = text;
  };

  InfoPannel.prototype.setBackground = function(color) {
    this.pannel.style.backgroundColor = color;
  };

  return InfoPannel;

})(Pannel);

LetterPannel = (function(superClass) {
  extend(LetterPannel, superClass);


  /* the pannel containing the lettres (E,F,C,H) images */

  function LetterPannel(pannelID) {
    LetterPannel.__super__.constructor.call(this, pannelID);
    return;
  }

  LetterPannel.prototype.setLetter = function(letter) {
    if (!(letter === "E" || letter === "F" || letter === "H" || letter === "C")) {
      console.log("Error, letter " + letter + " not available");
      return;
    }
    this.pannel.src = "img/gazecuing_" + letter + ".png";
  };

  return LetterPannel;

})(Pannel);

ButtonPannel = (function(superClass) {
  extend(ButtonPannel, superClass);

  function ButtonPannel(pannelID) {
    ButtonPannel.__super__.constructor.call(this, pannelID);
    return;
  }

  return ButtonPannel;

})(Pannel);

TestMainPannel = (function(superClass) {
  extend(TestMainPannel, superClass);


  /* Main test pannel manage the whole test */

  function TestMainPannel(stepEndCallback, testEndCallback) {
    this.newStep = bind(this.newStep, this);
    this.onRightButtonClick = bind(this.onRightButtonClick, this);
    this.onLeftButtonClick = bind(this.onLeftButtonClick, this);

    /*
    @param stepEndCallback : called when a step of the test is done
    @param testEndCallback : called when the test is done
     */
    TestMainPannel.__super__.constructor.call(this, "test");
    window.onkeyup = (function(_this) {
      return function(event) {
        if (_this.isVisible()) {
          if (event.keyCode === 39) {
            _this.onRightButtonClick();
          } else if (event.keyCode === 37) {
            _this.onLeftButtonClick();
          }
        }
      };
    })(this);
    this.face = new FacePannel("testFace");
    this.info = new InfoPannel("testInfo");
    this.leftLetter = new LetterPannel("testLeftLettre");
    this.rightLetter = new LetterPannel("testRightLettre");
    this.leftButton = new ButtonPannel("leftButton");
    this.rightButton = new ButtonPannel("rightButton");
    this.selectedChar = "";
    this.timeValues = [];
    this.timeMean = 0;
    this.resultValues = [];
    this.resultMean = 0;
    this.nbrStep = 0;
    this.timer = new Timer();
    this.leftButton.pannel.onclick = this.onLeftButtonClick;
    this.rightButton.pannel.onclick = this.onRightButtonClick;
    this.stepEndCallback = stepEndCallback;
    this.testEndCallback = testEndCallback;
    return;
  }

  TestMainPannel.prototype.init = function() {

    /* init all values */
    this.leftLetter.setLetter("E");
    this.rightLetter.setLetter("C");
    this.info.setText("C'est partis");
    this.info.setBackground("#ff0");
    this.selectedChar = "E";
    this.timeValues = [];
    this.timeMean = 0;
    this.resultValues = [];
    this.resultMean = 0;
    this.nbrStep = 0;
    alert("Le but de ce test est d'indiquer le plus vite possible si vous voyez un 'E' ou un 'H'\n\nSi vous voyez un 'E' pressez la flèche gauche, si c'est un 'H', la flèche droite\n\nLe visage ne vous dit pas ou est la lettre cible");
    this.timer.startTimer();
  };

  TestMainPannel.prototype.onLeftButtonClick = function() {
    if (this.selectedChar === "E") {
      this.resultValues.push(true);
      this.info.setText("Bien");
      this.info.setBackground("#0f0");
    } else {
      this.resultValues.push(false);
      this.info.setText("Faux");
      this.info.setBackground("#f00");
    }
    this.newStep();
  };

  TestMainPannel.prototype.onRightButtonClick = function() {
    if (this.selectedChar === "H") {
      this.resultValues.push(true);
      this.info.setText("Bien");
      this.info.setBackground("#0f0");
    } else {
      this.resultValues.push(false);
      this.info.setText("Faux");
      this.info.setBackground("#f00");
    }
    this.newStep();
  };

  TestMainPannel.prototype.newStep = function() {

    /* init a new step */
    var currentTime, i, j, k, len, len1, otherChar, ref, ref1;
    currentTime = this.timer.getTime();
    this.timeValues.push(currentTime);
    if (Math.random() > 0.5) {
      this.face.lookTo("left");
    } else {
      this.face.lookTo("right");
    }
    if (Math.random() > 0.5) {
      this.selectedChar = "H";
    } else {
      this.selectedChar = "E";
    }
    if (Math.random() > 0.5) {
      otherChar = "C";
    } else {
      otherChar = "F";
    }
    if (Math.random() > 0.5) {
      this.leftLetter.setLetter(this.selectedChar);
      this.rightLetter.setLetter(otherChar);
    } else {
      this.leftLetter.setLetter(otherChar);
      this.rightLetter.setLetter(this.selectedChar);
    }
    this.timeMean = 0;
    ref = this.timeValues;
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      this.timeMean += i;
    }
    this.timeMean /= this.timeValues.length;
    this.resultMean = 0;
    ref1 = this.resultValues;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      if (i) {
        this.resultMean += 1;
      }
    }
    this.resultMean /= this.resultValues.length;
    this.timer.startTimer();
    this.stepEndCallback();
    this.nbrStep += 1;
    if (this.nbrStep === 20) {
      this.testEndCallback();
    }
  };

  return TestMainPannel;

})(Pannel);
